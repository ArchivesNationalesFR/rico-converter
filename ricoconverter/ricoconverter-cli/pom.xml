<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>fr.gouv.culture.archives-nationales</groupId>
	<artifactId>ricoconverter-cli</artifactId>
	
	<parent>
		<groupId>fr.gouv.culture.archives-nationales</groupId>
		<artifactId>ricoconverter-root-pom</artifactId>
	    <version>2.0.1</version>
        <relativePath>../pom.xml</relativePath>
	</parent>

	<name>RiC-O Converter command-line converter</name>
	<description>Command-line Tool to convert EAC and EAD XML files to RiC-O RDF files (Records in Context).</description>

	<build>
		<plugins>

			<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.7.0</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>

			<!-- Ce plugin ajoute les elements suivants dans le fichier META-INF/MANIFEST.MF 
				du jar final : Implementation-Title: ${project.artifactId} Implementation-Version: 
				${project.version} Implementation-Vendor-Id: ${project.groupId} Cela permet 
				de récupérer la version Maven dans le code, via cette ligne : App.class.getPackage().getImplementationVersion(); 
				L'autre possibilité est d'aller lire le fichier de properties généré automatiquement 
				par Maven à cet endroit : META-INF/maven/${project.groupId}/${project.artifactId}/pom.properties -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
					</archive>
				</configuration>
			</plugin>

		    <plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-shade-plugin</artifactId>
			<version>1.3.2</version>
			<executions>
			  <execution>
			    <phase>package</phase>
			    <goals>
			      <goal>shade</goal>
			    </goals>
			    <configuration>
			      <shadedArtifactAttached>true</shadedArtifactAttached>
			      <shadedClassifierName>onejar</shadedClassifierName>
			        <filters>
				        <filter>
				            <artifact>*:*</artifact>
				            <excludes>
				                <exclude>META-INF/*.SF</exclude>
				                <exclude>META-INF/*.DSA</exclude>
				                <exclude>META-INF/*.RSA</exclude>
				            </excludes>
				        </filter>
				    </filters>            
			      <transformers>
					<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
						<manifestEntries>
						  <Main-Class>fr.gouv.culture.an.ricoconverter.cli.Main</Main-Class>
						  <Class-Path>.</Class-Path>
						</manifestEntries>
		 			</transformer>
		 			<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
	      				<resource>META-INF/services/org.eclipse.rdf4j.query.algebra.evaluation.function.Function</resource>
	      			</transformer>
		 			<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
	      				<resource>META-INF/services/org.eclipse.rdf4j.query.parser.QueryParserFactory</resource>
	      			</transformer>
		 			<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
	      				<resource>META-INF/services/org.eclipse.rdf4j.query.resultio.BooleanQueryResultParserFactory</resource>
	      			</transformer>
		 			<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
	      				<resource>META-INF/services/org.eclipse.rdf4j.query.resultio.BooleanQueryResultWriterFactory</resource>
	      			</transformer>
		 			<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
	      				<resource>META-INF/services/org.eclipse.rdf4j.query.resultio.TupleQueryResultParserFactory</resource>
	      			</transformer>
		 			<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
	      				<resource>META-INF/services/org.eclipse.rdf4j.query.resultio.TupleQueryResultWriterFactory</resource>
	      			</transformer>
		 			<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
	      				<resource>META-INF/services/org.eclipse.rdf4j.repository.config.RepositoryFactory</resource>
	      			</transformer>
		 			<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
	      				<resource>META-INF/services/org.eclipse.rdf4j.rio.RDFParserFactory</resource>
	      			</transformer>
		 			<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
	      				<resource>META-INF/services/org.eclipse.rdf4j.rio.RDFWriterFactory</resource>
	      			</transformer>
		 			<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
	      				<resource>META-INF/services/org.eclipse.rdf4j.sail.config.SailFactory</resource>
	      			</transformer>
		 			<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
	      				<resource>META-INF/services/org.eclipse.rdf4j.sail.rdbms.RdbmsProvider</resource>
	      			</transformer>
	      			<!-- accumulation des schemas Spring -->
	      			<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
						<resource>META-INF/spring.handlers</resource>
					</transformer>
					<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
						<resource>META-INF/spring.schemas</resource>
					</transformer>
			      </transformers>
			    </configuration>
			  </execution>
			</executions>
		    </plugin>

		    <plugin>
		      <groupId>org.codehaus.mojo</groupId>
		      <artifactId>exec-maven-plugin</artifactId>
		      <version>1.2</version>
		      <executions>
		        <execution>
		          <id>generate-command-properties</id>
		          <phase>prepare-package</phase>
		          <goals>
		            <goal>java</goal>
		          </goals>
		        </execution>
		      </executions>
		      <configuration>
		        <mainClass>fr.gouv.culture.an.ricoconverter.cli.ParameterFilesGenerator</mainClass>
		        <arguments>${project.build.directory}/classes/parameters</arguments>
		      </configuration>
		    </plugin>

		</plugins>
	</build>


	<dependencies>

		<!-- converter -->
		<dependency>
			<groupId>fr.gouv.culture.archives-nationales</groupId>
			<artifactId>ricoconverter-convert</artifactId>
	    	<version>${project.version}</version>
		</dependency>

		<!-- for command-line parsing -->
		<dependency>
			<groupId>com.beust</groupId>
			<artifactId>jcommander</artifactId>
		</dependency>

		<!-- logging -->
		<dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
		
		<!-- commons io for parameter files writing -->
		<dependency>
		    <groupId>commons-io</groupId>
		    <artifactId>commons-io</artifactId>
		</dependency>

		<!-- Progress bar -->
		  <dependency>
		      <groupId>me.tongfei</groupId>
		      <artifactId>progressbar</artifactId>
		      <version>0.7.2</version>
		  </dependency>

		<!-- Jena -->
		<dependency>
		   <groupId>org.apache.jena</groupId>
		   <artifactId>apache-jena-libs</artifactId>
		   <type>pom</type>
		   <version>3.12.0</version>
		</dependency>

	</dependencies>

</project>
